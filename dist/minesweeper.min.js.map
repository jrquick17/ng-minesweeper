{"version":3,"sources":["minesweeper.min.js"],"names":["angular","module","MinesweeperService","this","reset","service","$inject","MinesweeperController","$scope","DEFAULT_COLS","DEFAULT_ROWS","MIN_COLS","MIN_ROWS","MAX_COLS","MAX_ROWS","mineCount","$watch","minePercent","get","cols","rows","buildBoard","unlimitedFlags","checkColsAndRows","cells","i","j","cell","hasFlag","hasMine","Math","random","isClear","col","row","k","l","touches","countTouches","checkEnd","clearNeighbors","neighbors","getNeighbors","neighborsCount","length","neighbor","clearCell","showMessage","gameover","click","event","which","rightClick","leftClick","gameOver","setFlag","closeModal","$","modal","neighborCount","alpha","beta","value","neighborFunctions","neighborFunctionsCount","neighborFunction","push","getNeighborBottom","getNeighborBottomLeft","getNeighborBottomRight","getNeighborLeft","getNeighborRight","getNeighborTop","getNeighborTopLeft","getNeighborTopRight","restart","flagsUsed","message","title","toggleSettings","showSettings","mustRestart","init","controller","directive","controllerAs","restrict","scope","template"],"mappings":"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","file":"minesweeper.min.js","sourcesContent":["(function() {\n    'use strict';\n\n    angular.module('minesweeper', [\n        'pr.longpress'\n    ]);\n})();\n(function() {\n    'use strict';\n\n    angular.module('minesweeper').service(\n        'MinesweeperService',\n        MinesweeperService\n    );\n\n    MinesweeperService.$inject = [];\n\n    function MinesweeperService() {\n        var MinesweeperService = this;\n\n        MinesweeperService.reset = reset;\n        function reset() {\n\n        }\n        \n        MinesweeperService.reset();\n\n        return MinesweeperService;\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('minesweeper').controller(\n        'MinesweeperController',\n        MinesweeperController\n    );\n\n    MinesweeperController.$inject = [\n        '$scope',\n        'MinesweeperService'\n    ];\n\n    function MinesweeperController(\n        $scope,\n        MinesweeperService\n    ) {\n        var MinesweeperController = this;\n\n        MinesweeperController.DEFAULT_COLS = 10;\n        MinesweeperController.DEFAULT_ROWS = 6;\n\n        MinesweeperController.MIN_COLS = 3;\n        MinesweeperController.MIN_ROWS = 3;\n\n        MinesweeperController.MAX_COLS = 48;\n        MinesweeperController.MAX_ROWS = 48;\n\n        MinesweeperController.mineCount = 0;\n\n        $scope.$watch(\n            'minePercent',\n            function(minePercent) {\n                MinesweeperController.minePercent = MinesweeperController.get(\n                    minePercent,\n                    0.12\n                );\n            }\n        );\n\n        $scope.$watch(\n            'cols',\n            function(cols) {\n                MinesweeperController.cols = MinesweeperController.get(\n                    cols,\n                    MinesweeperController.DEFAULT_COLS\n                );\n            }\n        );\n\n        $scope.$watch(\n            'rows',\n            function(rows) {\n                MinesweeperController.rows = MinesweeperController.get(\n                    rows,\n                    MinesweeperController.DEFAULT_ROWS\n                );\n\n                MinesweeperController.buildBoard();\n            }\n        );\n\n        $scope.$watch(\n            'unlimitedFlags',\n            function(unlimitedFlags) {\n                MinesweeperController.unlimitedFlags = MinesweeperController.get(\n                    unlimitedFlags,\n                    false\n                );\n            }\n        );\n\n        MinesweeperController.buildBoard = buildBoard;\n        function buildBoard() {\n            MinesweeperController.checkColsAndRows();\n\n            MinesweeperController.cells = [];\n\n            for (var i = 0; i < MinesweeperController.rows; i++) {\n                MinesweeperController.cells[i] = [];\n\n                for (var j = 0; j < MinesweeperController.cols; j++) {\n                    var cell = {};\n\n                    cell.hasFlag = false;\n\n                    cell.hasMine = Math.random() <= MinesweeperController.minePercent;\n                    if (cell.hasMine) {\n                        MinesweeperController.mineCount++;\n                    }\n\n                    cell.isClear = false;\n\n                    cell.col = j;\n                    cell.row = i;\n\n                    MinesweeperController.cells[i][j] = cell;\n                }\n            }\n\n            for (var k = 0; k < MinesweeperController.rows; k++) {\n                for (var l = 0; l < MinesweeperController.cols; l++) {\n                    MinesweeperController.cells[k][l].touches = MinesweeperController.countTouches(\n                        MinesweeperController.cells[k][l]\n                    );\n                }\n            }\n        }\n\n        MinesweeperController.checkColsAndRows = checkColsAndRows;\n        function checkColsAndRows() {\n            if (MinesweeperController.cols > MinesweeperController.MAX_COLS) {\n                MinesweeperController.cols = MinesweeperController.MAX_COLS;\n            } else if (MinesweeperController.cols < MinesweeperController.MIN_COLS) {\n                MinesweeperController.cols = MinesweeperController.MIN_COLS;\n            }\n\n            if (MinesweeperController.rows > MinesweeperController.MAX_ROWS) {\n                MinesweeperController.rows = MinesweeperController.MAX_ROWS;\n            } else if (MinesweeperController.rows < MinesweeperController.MIN_ROWS) {\n                MinesweeperController.rows = MinesweeperController.MIN_ROWS;\n            }\n        }\n\n        MinesweeperController.checkEnd = checkEnd;\n        function checkEnd() {\n            for (var i = 0; i < MinesweeperController.rows; i++) {\n                for (var j = 0; j < MinesweeperController.cols; j++) {\n                    if (!MinesweeperController.cells[i][j].isClear) {\n                        if (!MinesweeperController.cells[i][j].hasFlag) {\n                            return false;\n                        } else if (!MinesweeperController.cells[i][j].hasMine) {\n                            return false;\n                        }\n                    }\n                }\n            }\n\n            return true;\n        }\n\n        MinesweeperController.clearNeighbors = clearNeighbors;\n        function clearNeighbors(cell) {\n            var neighbors = MinesweeperController.getNeighbors(cell);\n            var neighborsCount = neighbors.length;\n\n            for (var i = 0; i < neighborsCount; i++) {\n                var neighbor = neighbors[i];\n\n                if (!neighbor.isClear && !neighbor.hasMine) {\n                    MinesweeperController.clearCell(neighbor);\n                }\n            }\n        }\n\n        MinesweeperController.clearCell = clearCell;\n        function clearCell(cell) {\n            if (!cell.hasFlag) {\n                cell.isClear = true;\n\n                if (cell.hasMine) {\n                    MinesweeperController.showMessage('BOOM!', 'Game Over');\n\n                    MinesweeperController.gameover = true;\n                } else {\n                    if (cell.touches === 0) {\n                        MinesweeperController.clearNeighbors(cell);\n                    }\n                }\n            }\n        }\n\n        MinesweeperController.click = click;\n        function click(event, cell) {\n            if (event.which === 3) {\n                MinesweeperController.rightClick(event, cell);\n            } else if (event.which === 1) {\n                MinesweeperController.leftClick(event, cell);\n            }\n        }\n\n        MinesweeperController.leftClick = leftClick;\n        function leftClick(event, cell) {\n            if (event.which === 1) {\n                if (!MinesweeperController.gameover) {\n                    MinesweeperController.clearCell(cell);\n\n                    var gameOver = MinesweeperController.checkEnd();\n                    if (gameOver) {\n                        MinesweeperController.showMessage('Good game.', 'Game Over');\n\n                        MinesweeperController.gameover = true;\n                    }\n                }\n            }\n        }\n\n        MinesweeperController.rightClick = rightClick;\n        function rightClick(event, cell) {\n            if (event.which === 3) {\n                if (!MinesweeperController.gameover) {\n                    MinesweeperController.setFlag(cell);\n                }\n            }\n        }\n\n        MinesweeperController.closeModal = closeModal;\n        function closeModal() {\n            $('#modal').modal('hide');\n        }\n\n        MinesweeperController.countTouches = countTouches;\n        function countTouches(cell) {\n            var touches = 0;\n\n            var neighbors = MinesweeperController.getNeighbors(cell);\n            var neighborCount = neighbors.length;\n\n            for (var i = 0; i < neighborCount; i++) {\n                var neighbor = neighbors[i];\n\n                if (neighbor.hasMine) {\n                    touches++;\n                }\n            }\n\n            return touches;\n        }\n        \n        MinesweeperController.get = get;\n        function get(alpha, beta) {\n            var value = null;\n            \n            if (typeof alpha === 'undefined') {\n                if (typeof beta !== 'undefined') {\n                    value = beta;\n                }\n            }\n\n            return value;\n        }\n\n        MinesweeperController.getNeighbors = getNeighbors;\n        function getNeighbors(cell) {\n            var neighbors = [];\n\n            var neighborFunctions = [\n                'getNeighborBottom',\n                'getNeighborBottomLeft',\n                'getNeighborBottomRight',\n                'getNeighborLeft',\n                'getNeighborRight',\n                'getNeighborTop',\n                'getNeighborTopLeft',\n                'getNeighborTopRight'\n            ];\n\n            var neighborFunctionsCount = neighborFunctions.length;\n\n            for (var i = 0; i < neighborFunctionsCount; i++) {\n                var neighborFunction = neighborFunctions[i];\n\n                var neighbor = MinesweeperController[neighborFunction](cell);\n                if (neighbor !== null) {\n                    neighbors.push(neighbor);\n                }\n            }\n\n            return neighbors;\n        }\n\n        MinesweeperController.getNeighborBottom = getNeighborBottom;\n        function getNeighborBottom(cell) {\n            if (cell.row + 1 !== MinesweeperController.rows) {\n                return MinesweeperController.cells[cell.row + 1][cell.col];\n            }\n\n            return null;\n        }\n\n        MinesweeperController.getNeighborBottomLeft = getNeighborBottomLeft;\n        function getNeighborBottomLeft(cell) {\n            if (cell.col !== 0 && cell.row + 1 !== MinesweeperController.rows) {\n                return MinesweeperController.cells[cell.row + 1][cell.col - 1];\n            }\n\n            return null;\n        }\n\n        MinesweeperController.getNeighborBottomRight = getNeighborBottomRight;\n        function getNeighborBottomRight(cell) {\n            if (cell.col + 1 !== MinesweeperController.cols && cell.row + 1 !== MinesweeperController.rows) {\n                return MinesweeperController.cells[cell.row + 1][cell.col + 1];\n            }\n\n            return null;\n        }\n\n        MinesweeperController.getNeighborLeft = getNeighborLeft;\n        function getNeighborLeft(cell) {\n            if (cell.col !== 0) {\n                return MinesweeperController.cells[cell.row][cell.col - 1];\n            }\n\n            return null;\n        }\n\n        MinesweeperController.getNeighborRight = getNeighborRight;\n        function getNeighborRight(cell) {\n            if (cell.col + 1 !== MinesweeperController.cols) {\n                return MinesweeperController.cells[cell.row][cell.col + 1];\n            }\n\n            return null;\n        }\n\n        MinesweeperController.getNeighborTop = getNeighborTop;\n        function getNeighborTop(cell) {\n            if (cell.row !== 0) {\n                return MinesweeperController.cells[cell.row - 1][cell.col];\n            }\n\n            return null;\n        }\n\n        MinesweeperController.getNeighborTopLeft = getNeighborTopLeft;\n        function getNeighborTopLeft(cell) {\n            if (cell.col !== 0 && cell.row !== 0) {\n                return MinesweeperController.cells[cell.row - 1][cell.col - 1];\n            }\n\n            return null;\n        }\n\n        MinesweeperController.getNeighborTopRight = getNeighborTopRight;\n        function getNeighborTopRight(cell) {\n            if (cell.col + 1 !== MinesweeperController.cols && cell.row !== 0) {\n                return MinesweeperController.cells[cell.row - 1][cell.col + 1];\n            }\n\n            return null;\n        }\n\n        MinesweeperController.restart = restart;\n        function restart() {\n            MinesweeperController.reset();\n            MinesweeperController.buildBoard();\n        }\n\n        MinesweeperController.setFlag = setFlag;\n        function setFlag(cell) {\n            if (!cell.isClear && cell.hasFlag) {\n                cell.hasFlag = false;\n\n                MinesweeperController.flagsUsed--;\n            } else if (MinesweeperController.unlimitedFlags || MinesweeperController.flagsUsed < MinesweeperController.mineCount) {\n                if (!cell.isClear) {\n                    cell.hasFlag = true;\n\n                    MinesweeperController.flagsUsed++;\n                }\n            } else {\n                MinesweeperController.showMessage('No more flags left.');\n            }\n        }\n\n        MinesweeperController.showMessage = showMessage;\n        function showMessage(message, title) {\n            MinesweeperController.message = message;\n\n            MinesweeperController.title = MinesweeperController.get(\n                title,\n                'Message'\n            );\n\n            $('#modal').modal('show');\n        }\n\n        MinesweeperController.toggleSettings = toggleSettings;\n        function toggleSettings() {\n            MinesweeperController.showSettings = !MinesweeperController.showSettings;\n        }\n\n        MinesweeperController.reset = reset;\n        function reset() {\n            MinesweeperController.flagsUsed = 0;\n\n            MinesweeperController.gameover = false;\n\n            MinesweeperController.message = '';\n\n            MinesweeperController.mustRestart = false;\n\n            MinesweeperController.showSettings = false;\n\n            MinesweeperController.title = '';\n        }\n\n        MinesweeperController.init = init;\n        function init() {\n            MinesweeperController.reset();\n        }\n\n        MinesweeperController.init();\n    }\n})();\n(function() {\n    'use strict';\n\n    angular.module('minesweeper').directive(\n        'minesweeper',\n        minesweeper\n    );\n\n    function minesweeper() {\n        return {\n            controller:   'MinesweeperController',\n            controllerAs: 'ctrl',\n            restrict:     'E',\n            scope:        {\n                cols:           '=',\n                minePercent:    '=',\n                rows:           '=',\n                unlimitedFlags: '='\n            },\n            template:'<div class=\"global-wrapper\"><div class=\"row title-bar\"><div class=\"col\"><button data-ng-if=\"ctrl.gameover\" type=\"button\" class=\"btn btn-default btn-sm float-left\" data-ng-click=\"ctrl.restart()\"><img src=\"node_modules/octicons/build/svg/triangle-right.svg\"> PLAY AGAIN</button> <button data-ng-if=\"!ctrl.gameover\" type=\"button\" class=\"btn btn-default btn-sm float-left\" data-ng-click=\"ctrl.restart()\"><img src=\"node_modules/octicons/build/svg/sync.svg\"> RESET</button></div><div class=\"col text-center\">{{ ctrl.showSettings ? \\'SETTINGS\\' : \\'MINESWEEPER\\' }}</div><div class=\"col\"><button type=\"button\" class=\"btn btn-default btn-sm float-right\" data-ng-click=\"ctrl.toggleSettings()\"><img src=\"node_modules/octicons/build/svg/gear.svg\"> SETTINGS</button></div></div><div class=\"board\"><div data-ng-if=\"!ctrl.showSettings\" class=\"row no-gutters\" data-ng-class=\"{ \\'gameover\\': ctrl.gameover }\" data-ng-repeat=\"cols in ctrl.cells\"><div data-ng-repeat=\"cell in cols\" class=\"col\" data-ng-class=\"{ \\'clear\\': cell.isClear && !cell.hasMine && cell.touches === 0, \\'mine\\': cell.isClear && cell.hasMine, \\'safe\\': cell.isClear && !cell.hasMine && cell.touches !== 0, \\'flag\\': !cell.isClear && cell.hasFlag, \\'unknown\\': !cell.isClear && !cell.hasFlag, \\'touches-0\\': cell.touches === 0, \\'touches-1\\': cell.touches === 1, \\'touches-2\\': cell.touches === 2, \\'touches-3\\': cell.touches === 3, \\'touches-4\\': cell.touches === 4, \\'touches-5\\': cell.touches === 5, \\'touches-6\\': cell.touches === 6, \\'touches-7\\': cell.touches === 7, \\'touches-8\\': cell.touches === 8 }\" on-long-press=\"ctrl.setFlag(cell)\" prevent-click=\"true\" data-ng-click=\"ctrl.click($event, cell)\" data-ng-mousedown=\"ctrl.rightClick($event, cell)\" oncontextmenu=\"return false\"><div class=\"dummy\"></div><div class=\"cell\"><div data-ng-if=\"cell.isClear\">{{ cell.hasMine ? \\'X\\' : cell.touches }}</div></div></div></div></div><div data-ng-if=\"ctrl.showSettings\"><div class=\"row\"><div class=\"col-72 form-group\"><label>Rows <input type=\"text\" class=\"form-control\" min=\"ctrl.MAX_ROWS\" max=\"ctrl.MIN_ROWS\" step=\"1\" data-ng-model=\"ctrl.rows\" data-ng-change=\"ctrl.mustRestart = true\"></label></div><div class=\"col-72 form-group\"><label>Columns <input type=\"number\" class=\"form-control\" min=\"ctrl.MAX_COLS\" max=\"ctrl.MIN_COLS\" step=\"1\" data-ng-model=\"ctrl.cols\" data-ng-change=\"ctrl.mustRestart = true\"></label></div></div><div class=\"row\"><div class=\"col form-group\"><label>Mine Percent <input type=\"number\" class=\"form-control\" min=\"0.01\" max=\"1.00\" step=\"0.01\" data-ng-model=\"ctrl.minePercent\" data-ng-change=\"ctrl.mustRestart = true\"></label></div></div><div class=\"row\"><div class=\"col input-group\"><div class=\"input-group-prepend\"><div class=\"input-group-text\"><input type=\"radio\" aria-label=\"Unlimited flags\" data-ng-model=\"ctrl.unlimitedFlags\" data-ng-change=\"ctrl.mustRestart = true\"> Unlimited Flags</div></div></div></div><div class=\"row\"><button data-ng-if=\"ctrl.mustRestart\" class=\"btn btn-block col-72\" data-ng-click=\"ctrl.init()\">Save and Restart</button> <button class=\"btn btn-block\" data-ng-class=\"{ \\'col-72\\': ctrl.mustRestart }\" data-ng-click=\"ctrl.toggleSettings()\">Cancel</button></div></div></div><div id=\"modal\" class=\"modal fade\" tabindex=\"-1\" role=\"dialog\"><div class=\"modal-dialog\" role=\"document\"><div class=\"modal-content\"><div class=\"modal-header\"><h5 class=\"modal-title\">{{ ctrl.title }}</h5><button type=\"button\" class=\"close\" data-dismiss=\"modal\" aria-label=\"Close\"><span aria-hidden=\"true\">&times;</span></button></div><div class=\"modal-body\">{{ ctrl.message }}</div><div class=\"modal-footer\"><button type=\"button\" class=\"btn btn-primary btn-block\" data-ng-click=\"ctrl.closeModal()\">Close</button></div></div></div></div>'\n        };\n    }\n})();"]}